#!/bin/bash

#
# seafile-server-installer/seafile_v5_centos
#
# Copyright 2015-2016
#   Alexander Jackson <alexander.jackson@seafile.de>
#   J. Fernando Lagrange <fernando.lagrange@seafile.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Uncomment to run in verbose mode
#set -x

# Stop on first error
set -e

function are-we-root-abort-if-not {
if [[ $EUID -ne 0 ]]; then
  echo "Aborting because you are not root" ; exit 1
fi
}

are-we-root-abort-if-not

# Use logfile
# See <http://mywiki.wooledge.org/BashFAQ/106>
CURRENT_DATETIME=$(date '+%Y%m%d-%Hh%Mm%S')
INSTALLATION_LOGFILE=/root/${CURRENT_DATETIME}_$(basename ${0})_installation.log
touch ${INSTALLATION_LOGFILE}
chmod 600 ${INSTALLATION_LOGFILE}
exec > >(tee ${INSTALLATION_LOGFILE}) 2>&1


# Determine which Seafile version to install
cat <<EOF

  Possible options:
  1 = Seafile Community Edition (CE)
  2 = Seafile Professional (PRO)
  3 = Seafile Raspberry Pi (CE)

EOF
PS3="Which Seafile version would you like to install? "
select SEAFILE_SERVER_VERSION in CE PRO PI ABORT
do
case "${SEAFILE_SERVER_VERSION}" in
ABORT) echo "Aborting" ; exit 1 ; break ;;
CE) SEAFILE_SERVER_PROFESSIONAL=disabled ; break ;;
PRO) SEAFILE_SERVER_PROFESSIONAL=enabled ; break ;;
PI) SEAFILE_SERVER_PROFESSIONAL=disabled ; break ;;
*) echo "$REPLY: Wrong value. Select 1 or 2." ;;
esac
done


# Vars
SERVER_NAME=$(hostname -s | cut -c -16)
while test "${#SERVER_NAME}" -lt 2; do SERVER_NAME="${SERVER_NAME}_"; done
HOSTNAME=$(hostname -f)
SEAFILE_SERVER_ADMIN=admin@${HOSTNAME}
SEAFILE_SERVER_USER=seafile
SEAFILE_SERVER_FILESERVER_PORT=8082
SEAFILE_SERVER_HOME=/opt/seafile
SEAFILE_SERVER_TIME_ZONE="Europe/Berlin"

# Don't touch the following variable, unless you know what you are doing
OS=$(awk '{ print $1 }' /etc/redhat-release)
OS_VERSION=$(awk '{ print $4 }' /etc/redhat-release)
OS_MAJOR_VERSION=${OS_VERSION:0:1}


# Get architecture
# Get architecture
if [ ${SEAFILE_SERVER_VERSION} = "PI" ]
  then
    ARCH=arm
elif [ $(getconf LONG_BIT) = "64" ]
  then
    ARCH=x86-64
else
    ARCH=i386
fi
PACKAGE_ARCH=$(yum version | grep "^Inst:" | awk '{ print $2 }' | awk -F'/' '{ print $2 }')

if [ ${SEAFILE_SERVER_PROFESSIONAL} = "enabled" ]
  then
    # Seafile Professional
    SEAFILE_SERVER_SOURCE=$(find /usr/src/seafile/seafile-pro-server_*_x86-64.tar.gz | sort -r | head -1)
    SEAFILE_SERVER_VERSION=$(echo ${SEAFILE_SERVER_SOURCE} | awk -F '_' '{ print $2}')
fi



# Functions
function print-system-infos {
# Log system infos
echo Timestamp
echo -----------------------------------------------------------------
date
echo
echo
echo Hostnames
echo -----------------------------------------------------------------
echo "$(hostname -f),$(hostname -s),$(hostname -d),$(hostname -I|cut -f 1 -d ' ' )"
echo
echo
echo Content of /etc/hosts
echo -----------------------------------------------------------------
cat /etc/hosts
echo
echo
echo OS, OS version and OS Architecture
echo -----------------------------------------------------------------
echo ${OS}, ${OS_VERSION} and ${ARCH}
echo
echo
echo Package Architecture
echo -----------------------------------------------------------------
echo ${PACKAGE_ARCH}
echo
echo
echo CPU info
echo -----------------------------------------------------------------
cat /proc/cpuinfo
echo
echo
echo Memory info
echo -----------------------------------------------------------------
cat /proc/meminfo
echo
echo
echo Active Kernel
echo -----------------------------------------------------------------
uname -a
echo
echo
echo Network Interfaces
echo -----------------------------------------------------------------
ip link show
echo
echo
echo IP Addresses
echo -----------------------------------------------------------------
ip addr show
echo
echo
echo DNS Servers
echo -----------------------------------------------------------------
cat /etc/resolv.conf
echo
echo
echo Routes
echo -----------------------------------------------------------------
ip route show table all
echo
echo
echo "Content of /etc/sysconfig/network-scripts/ifcfg-*"
echo -----------------------------------------------------------------
for eth in /etc/sysconfig/network-scripts/ifcfg-* ; do echo ${eth} ; cat ${eth} ; done
echo
echo
echo Centos Version
echo -----------------------------------------------------------------
cat /etc/redhat-release
echo
echo
find /etc/yum/ -type f | while read line ; do echo ; \
    echo Content of ${line} ; \
    echo ----------------------------------------------------------------- ; \
    cat ${line} ; \
	echo ;
done
echo
echo
echo Installed packages
echo -----------------------------------------------------------------
rpm -qa
echo
echo
echo Process List
echo -----------------------------------------------------------------
ps axu
echo
echo
echo Local user accounts
echo -----------------------------------------------------------------
cat /etc/passwd
}


function description {
clear
cat <<EOF

  Installing Seafile Server ${SEAFILE_SERVER_VERSION} on
  ${OS} ${OS_VERSION} (${ARCH}).

  Features: NGINX, MariaDB, Memcached, SeafDAV.
  -----------------------------------------------------------------

  This installer is meant to run on a freshly installed machine
  only. If you run it on a production server things can and
  probably will go terrible wrong and you will loose valuable
  data!

  For questions or suggestions please contact me at
  alexander.jackson@seafile.de

  -----------------------------------------------------------------

  Hit return to proceed or CTRL-C to abort.

EOF
read dummy
clear
}

function ensure-we-are-running-the-installer-on-a-supported-operating-system {
if [[ ${OS} != CentOS || ${OS_MAJOR_VERSION} != 7 ]] ; then
    echo "Aborting because ${OS} ${OS_VERSION} is not supported by this script" ; exit 1
fi
}



function does-user-exist-and-abort-if-he-does {
if getent passwd ${SEAFILE_SERVER_USER} > /dev/null 2>&1 ;
then
  echo "Aborting because user ${SEAFILE_SERVER_USER} already exist" ; exit 1
fi
}


function does-directory-exist-abort-if-it-does {
if [[ -d "${SEAFILE_SERVER_HOME}" ]] ;
then
  echo "Aborting because directory ${SEAFILE_SERVER_HOME} already exist" ; exit 1
fi
}


function abort-if-seafile-professional-source-is-missing {
if [ ${SEAFILE_SERVER_PROFESSIONAL} = "enabled" ]
then
  if [[ -f ${SEAFILE_SERVER_SOURCE} ]] ;
  then
    echo "Found ${SEAFILE_SERVER_SOURCE}. Proceeding with installation..."
  else
    echo "Aborting because SEAFILE_SERVER_SOURCE environment variable is missing." ; exit 1
  fi
fi
}


function setup-permissive-selinux {
# runtime
setenforce 0
# permanently
sed -i 's/^SELINUX=.*/SELINUX=permissive/' /etc/selinux/config
}


function extra-packages-for-enterprise-linux {
yum install epel-release -y
}


function update-operating-system {
yum upgrade -y
}


function install-system-utils {
yum install sudo ntp less htop pwgen curl openssl nano net-tools lsof deltarpm -y
}


function setup-ntpd {
ntpd -gq
}


function setup-firewall {
yum install firewalld fail2ban -y

# https://www.optimox.de/tutorials/linux-allgemein/centos-firewall-konfigurieren-mit-firewalld
for i in ssh http https ; do firewall-cmd --zone=public --add-service=${i} --permanent ; done
firewall-cmd --reload
}


function install-postfix {
yum install postfix -y
}


function setup-unattended-upgrades {
yum install yum-cron -y
sed -i 's/^apply_updates.*/apply_updates = yes/' /etc/yum/yum-cron.conf
}


function install-seafile-server-requirements {
yum install python-setuptools python-simplejson python-pillow MySQL-python memcached python-memcached curl openssl nss-pam-ldapd -y

# Seafile Professional requirements
if [ ${SEAFILE_SERVER_PROFESSIONAL} = "enabled" ]
 then
   yum install java-1.7.0-openjdk poppler-utils libreoffice libreoffice-headless libreoffice-pyuno \
       libreoffice-pyuno wqy-microhei-fonts wqy-zenhei-fonts wqy-unibit-fonts python-urllib3 -y
fi
}


function install-setup-nginx {
yum install nginx -y
systemctl enable nginx

rm -rf /etc/nginx/conf.d/*

cat > /etc/nginx/conf.d/seafile.conf <<'EOF'
server {
  listen       80;
  server_name  "";
  return 301 https://$http_host$request_uri;
}

server {
  listen 443;
  server_name  "";

  ssl on;
  ssl_certificate /etc/nginx/ssl/seafile.crt;
  ssl_certificate_key /etc/nginx/ssl/seafile.key;

  proxy_set_header X-Forwarded-For $remote_addr;

  location / {
    fastcgi_pass    127.0.0.1:8000;
    fastcgi_param   SCRIPT_FILENAME     $document_root$fastcgi_script_name;
    fastcgi_param   PATH_INFO           $fastcgi_script_name;
    fastcgi_param   SERVER_PROTOCOL     $server_protocol;
    fastcgi_param   QUERY_STRING        $query_string;
    fastcgi_param   REQUEST_METHOD      $request_method;
    fastcgi_param   CONTENT_TYPE        $content_type;
    fastcgi_param   CONTENT_LENGTH      $content_length;
    fastcgi_param   SERVER_ADDR         $server_addr;
    fastcgi_param   SERVER_PORT         $server_port;
    fastcgi_param   SERVER_NAME         $server_name;
    fastcgi_param   REMOTE_ADDR         $remote_addr;
    fastcgi_param   HTTPS               on;
    fastcgi_param   HTTP_SCHEME         https;
    access_log      /var/log/nginx/seahub.access.log;
    error_log       /var/log/nginx/seahub.error.log;
  }

  location /seafhttp {
    rewrite ^/seafhttp(.*)$ $1 break;
    proxy_pass http://127.0.0.1:8082;
    client_max_body_size 0;
    proxy_connect_timeout  36000s;
    proxy_read_timeout  36000s;
    proxy_send_timeout  36000s;
  }

  location /media {
    root /opt/seafile/seafile-server-latest/seahub;
  }

  location /seafdav {
    fastcgi_pass    127.0.0.1:8080;
    fastcgi_param   SCRIPT_FILENAME     $document_root$fastcgi_script_name;
    fastcgi_param   PATH_INFO           $fastcgi_script_name;
    fastcgi_param   SERVER_PROTOCOL     $server_protocol;
    fastcgi_param   QUERY_STRING        $query_string;
    fastcgi_param   REQUEST_METHOD      $request_method;
    fastcgi_param   CONTENT_TYPE        $content_type;
    fastcgi_param   CONTENT_LENGTH      $content_length;
    fastcgi_param   SERVER_ADDR         $server_addr;
    fastcgi_param   SERVER_PORT         $server_port;
    fastcgi_param   SERVER_NAME         $server_name;
    fastcgi_param   REMOTE_ADDR         $remote_addr;
    fastcgi_param   HTTPS               on;
    client_max_body_size 0;
    access_log      /var/log/nginx/seafdav.access.log;
    error_log       /var/log/nginx/seafdav.error.log;
  }
}
EOF

# Create optimized nginx.conf
cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
cat > /etc/nginx/nginx.conf <<'ENDOFFILE'
user nginx nginx;
worker_processes 4;

events {
  worker_connections 8096;
  multi_accept on;
  use epoll;
}

pid /var/run/nginx.pid;
worker_rlimit_nofile 40000;

http {
  server_tokens off;
  server_names_hash_bucket_size 128;
  client_max_body_size 50M;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log warn;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  client_body_timeout 12;
  client_header_timeout 12;
  keepalive_timeout 15;
  send_timeout 10;
  # Fully disabled gzip compression to mitigate Django BREACH attack: https://www.djangoproject.com/weblog/2013/aug/06/breach-and-django/
  gzip off;
  #gzip_vary on;
  #gzip_proxied expired no-cache no-store private auth any;
  #gzip_comp_level 9;
  #gzip_min_length 10240;
  #gzip_buffers 16 8k;
  #gzip_http_version 1.1;
  #gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml font/woff2;
  #gzip_disable "MSIE [1-6].";
  include /etc/nginx/conf.d/*.conf;

  map $scheme $php_https {
    default off;
    https on;
  }

  include perfect-forward-secrecy.conf;
}
ENDOFFILE


# Setup perfect forward secrecy
openssl dhparam -dsaparam -out /etc/nginx/dh4096.pem 4096
cat > /etc/nginx/perfect-forward-secrecy.conf <<'EOF'
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA";
ssl_dhparam dh4096.pem;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
EOF

# Fix NGINX worker_processes to number of CPU cores
CPUS=$(cat /proc/cpuinfo | grep processor | wc | awk '{ print $1 }')
eval "sed -i 's/worker_processes.*/worker_processes  $CPUS;/g' /etc/nginx/nginx.conf"
}


function create-self-signed-certificate-for-nginx {
mkdir -p /etc/nginx/ssl
openssl genrsa -out /etc/nginx/ssl/seafile.key 4096
cat > /etc/nginx/ssl/seafile.cnf << EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_ca
prompt = no

[req_distinguished_name]
countryName = DE
stateOrProvinceName = Bayern
localityName = Wiesentheid
organizationName = Seafile
organizationalUnitName = Seahub
emailAddress = postmaster@$(hostname -d)
# Must be last for Seafile client to validate...
commonName = $(hostname -f)

[v3_ca]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:TRUE
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = $(hostname -f)
DNS.3 = $(hostname -s)
IP.1 = 127.0.0.1
IP.2 = $(hostname -I|cut -f 1 -d ' ')
EOF
openssl req -new -x509 -key /etc/nginx/ssl/seafile.key -out /etc/nginx/ssl/seafile.crt -days 10950 -config /etc/nginx/ssl/seafile.cnf -sha256
}


function restart-nginx {
systemctl restart nginx
}


function setup-maridb {
yum install mariadb-server -y
systemctl start mariadb
systemctl enable mariadb

SQLROOTPW=$(pwgen 14 1)
mysqladmin -u root password ${SQLROOTPW}

# Securing MariaDB
#/usr/bin/mysql_secure_installation

cat > /root/.my.cnf <<EOF
[client]
user=root
password=${SQLROOTPW}
EOF

chmod 600 /root/.my.cnf
}

function setup-database-backup {
  # install SeafileDE script
  SEAFILE_SERVER_DB_BACKUP_SCRIPT=/usr/local/sbin/seafile-server-backup-database
  curl -L https://raw.githubusercontent.com/SeafileDE/helper-scripts/master/seafile-server-backup-database -o ${SEAFILE_SERVER_DB_BACKUP_SCRIPT}

  # update user/password
  eval "sed -i 's#secret#$SQLROOTPW#' ${SEAFILE_SERVER_DB_BACKUP_SCRIPT}"

  # launch a backup now
  chmod +x ${SEAFILE_SERVER_DB_BACKUP_SCRIPT}
  ${SEAFILE_SERVER_DB_BACKUP_SCRIPT}

  # Launch this script on a daily basis
  ln -sf ${SEAFILE_SERVER_DB_BACKUP_SCRIPT} /etc/cron.daily/

  echo "Automatic database backups are in /var/backups/seafile-server/database/"
}

function setup-seafile-server-autostart {
cat > /etc/systemd/system/seafile.service <<'EOF'
[Unit]
Description=Seafile Server
After=network.target mariadb.service

[Service]
Type=oneshot
ExecStart=/opt/seafile/seafile-server-latest/seafile.sh start
ExecStop=/opt/seafile/seafile-server-latest/seafile.sh stop
RemainAfterExit=yes
User=seafile
Group=seafile

[Install]
WantedBy=multi-user.target
EOF

systemctl enable seafile


cat > /etc/systemd/system/seahub.service <<'EOF'
[Unit]
Description=Seafile Seahub
After=network.target seafile.service

[Service]
ExecStart=/opt/seafile/seafile-server-latest/seahub.sh start-fastcgi 8000
ExecStop=/opt/seafile/seafile-server-latest/seahub.sh stop
User=seafile
Group=seafile
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl enable seahub


# Seafile restart script
cat > /usr/local/sbin/seafile-server-restart << 'EOF'
#!/bin/bash
for ACTION in stop start ; do
    for SERVICE in seafile seahub ; do
      systemctl ${ACTION} ${SERVICE}
    done
done
EOF

chmod 700 /usr/local/sbin/seafile-server-restart
}


function add-system-user {
useradd --system --comment "${SEAFILE_SERVER_USER}" ${SEAFILE_SERVER_USER} --home-dir  ${SEAFILE_SERVER_HOME}
}


function create-seafile-server-directory {
mkdir -p ${SEAFILE_SERVER_HOME}/installed
}


function get-seafile-sources {
cd ${SEAFILE_SERVER_HOME}
if [ ${SEAFILE_SERVER_PROFESSIONAL} = "enabled" ]
  then
    cp ${SEAFILE_SERVER_SOURCE} ${SEAFILE_SERVER_HOME}/seafile-pro-server_${SEAFILE_SERVER_VERSION}_x86-64.tar.gz
    tar xzf ${SEAFILE_SERVER_HOME}/seafile-pro-server_${SEAFILE_SERVER_VERSION}_x86-64.tar.gz
    mv ${SEAFILE_SERVER_HOME}/seafile-pro-server_${SEAFILE_SERVER_VERSION}_x86-64.tar.gz ${SEAFILE_SERVER_HOME}/installed/seafile-pro-server_${SEAFILE_SERVER_VERSION}_x86-64.tar.gz
    SEAFILE_SERVER_INSTALL_PATH=${SEAFILE_SERVER_HOME}/seafile-pro-server-${SEAFILE_SERVER_VERSION}/
  else
    if [ ${SEAFILE_SERVER_VERSION} = "PI" ]
      then
        LATEST_URL=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/haiwen/seafile-rpi/releases/latest)
        SEAFILE_SERVER_VERSION=$(echo $LATEST_URL | awk -F'v' '{print $2}')

        curl -OL https://github.com/haiwen/seafile-rpi/releases/download/v${SEAFILE_SERVER_VERSION}/seafile-server_stable_${SEAFILE_SERVER_VERSION}_pi.tar.gz
        tountar="seafile-server_stable_${SEAFILE_SERVER_VERSION}_pi.tar.gz"
    else

      # Download latest CE version
      curl -OL https://download.seafile.de/seafile-server_latest_${ARCH}.tar.gz
      tountar="seafile-server_latest_${ARCH}.tar.gz"
    fi

    tar xzf $tountar
    if [ ${SEAFILE_SERVER_VERSION} != "PI" ]
      then
        SEAFILE_SERVER_VERSION=$(basename ${SEAFILE_SERVER_HOME}/seafile-server-* | awk -F'-' ' { print $3 }')
    fi
    mv $tountar installed/seafile-server_${SEAFILE_SERVER_VERSION}_${ARCH}.tar.gz
    SEAFILE_SERVER_INSTALL_PATH=${SEAFILE_SERVER_HOME}/seafile-server-${SEAFILE_SERVER_VERSION}/
fi

}


function create-seafile-database {
SEAFILE_DB_PW=$(pwgen 14 1)
cat > ${SEAFILE_SERVER_HOME}/.my.cnf <<EOF
[client]
user=seafile
password=${SEAFILE_DB_PW}
EOF
chmod 600 ${SEAFILE_SERVER_HOME}/.my.cnf
chown -R ${SEAFILE_SERVER_USER}.${SEAFILE_SERVER_USER} ${SEAFILE_SERVER_HOME}
mysql -e "CREATE DATABASE IF NOT EXISTS \`ccnet-db\` character set = 'utf8';"
mysql -e "CREATE DATABASE IF NOT EXISTS \`seafile-db\` character set = 'utf8';"
mysql -e "CREATE DATABASE IF NOT EXISTS \`seahub-db\` character set = 'utf8';"
mysql -e "CREATE USER 'seafile'@'localhost' IDENTIFIED BY '${SEAFILE_DB_PW}';"
mysql -e "GRANT ALL PRIVILEGES ON  \`ccnet-db\` . * TO  'seafile'@'localhost';"
mysql -e "GRANT ALL PRIVILEGES ON  \`seafile-db\` . * TO  'seafile'@'localhost';"
mysql -e "GRANT ALL PRIVILEGES ON  \`seahub-db\` . * TO  'seafile'@'localhost';"
}


function import-seahub-database-structure {
mysql seahub-db < ${SEAFILE_SERVER_INSTALL_PATH}/seahub/sql/mysql.sql
}


function setup-seafile-server {
cd ${SEAFILE_SERVER_INSTALL_PATH}

# Vars - Don't touch these unless you really know what you are doing!
SRC_DOCS_DIR=${SEAFILE_SERVER_INSTALL_PATH}/seafile/docs/
SEAHUB_SECRET_KEYGEN=${SEAFILE_SERVER_INSTALL_PATH}/seahub/tools/secret_key_generator.py
DEFAULT_CCNET_CONF_DIR=${SEAFILE_SERVER_HOME}/ccnet
DEFAULT_CONF_DIR=${SEAFILE_SERVER_HOME}/conf
SEAFILE_SERVER_DATA_DIR=${SEAFILE_SERVER_HOME}/seafile-data
LIBRARY_TEMPLATE_DIR=${SEAFILE_SERVER_DATA_DIR}/library-template
DEST_SETTINGS_PY=${DEFAULT_CONF_DIR}/seahub_settings.py
CCNET_INIT=${SEAFILE_SERVER_INSTALL_PATH}/seafile/bin/ccnet-init
SEAF_SERVER_INIT=${SEAFILE_SERVER_INSTALL_PATH}/seafile/bin/seaf-server-init
MEDIA_DIR=${SEAFILE_SERVER_INSTALL_PATH}/seahub/media
ORIG_AVATAR_DIR=${SEAFILE_SERVER_INSTALL_PATH}/seahub/media/avatars
DEST_AVATAR_DIR=${SEAFILE_SERVER_HOME}/seahub-data/avatars
SEAFILE_SERVER_SYMLINK=${SEAFILE_SERVER_HOME}/seafile-server-latest

# Create ccnet conf
export SEAFILE_LD_LIBRARY_PATH=${SEAFILE_SERVER_INSTALL_PATH}/seafile/lib/:${SEAFILE_SERVER_INSTALL_PATH}/seafile/lib64:${LD_LIBRARY_PATH}
LD_LIBRARY_PATH=$SEAFILE_LD_LIBRARY_PATH "${CCNET_INIT}" -c "${DEFAULT_CCNET_CONF_DIR}" \
  --name "${SERVER_NAME}" --host "${HOSTNAME}" -F "${DEFAULT_CONF_DIR}"

# Fix service url
eval "sed -i 's/^SERVICE_URL.*/SERVICE_URL = https:\/\/${HOSTNAME}/' ${DEFAULT_CONF_DIR}/ccnet.conf"

# Create seafile conf
LD_LIBRARY_PATH=$SEAFILE_LD_LIBRARY_PATH ${SEAF_SERVER_INIT} --seafile-dir "${SEAFILE_SERVER_DATA_DIR}" \
  --fileserver-port ${SEAFILE_SERVER_FILESERVER_PORT} -F "${DEFAULT_CONF_DIR}"


# Write seafile.ini
echo "${SEAFILE_SERVER_DATA_DIR}" > "${DEFAULT_CCNET_CONF_DIR}/seafile.ini"

# Configure Seafile WebDAV Server(SeafDAV)
mkdir -p ${DEFAULT_CONF_DIR}
cat > ${DEFAULT_CONF_DIR}/seafdav.conf <<EOF
[WEBDAV]
enabled = true
port = 8080
fastcgi = true
share_name = /seafdav
EOF

# generate seahub_settings.py
key=$(python "${SEAHUB_SECRET_KEYGEN}")
echo "SECRET_KEY = \"${key}\"" > "${DEST_SETTINGS_PY}"

# prepare avatar directory
mkdir -p "${SEAFILE_SERVER_HOME}/seahub-data"
mv "${ORIG_AVATAR_DIR}" "${DEST_AVATAR_DIR}"
ln -s ../../../seahub-data/avatars ${MEDIA_DIR}

# create logs directory
mkdir -p "${SEAFILE_SERVER_HOME}/logs"

# Create symlink for current server version
ln -s $(basename ${SEAFILE_SERVER_INSTALL_PATH}) ${SEAFILE_SERVER_SYMLINK}

# Fix permissions
chmod 0600 ${DEST_SETTINGS_PY}
chmod 0700 ${DEFAULT_CCNET_CONF_DIR} ${SEAFILE_SERVER_DATA_DIR} ${DEFAULT_CONF_DIR}

# copy user manuals to library template
mkdir -p ${LIBRARY_TEMPLATE_DIR}
cp -f ${SRC_DOCS_DIR}/*.doc ${LIBRARY_TEMPLATE_DIR}

# Setup professional features
if [ ${SEAFILE_SERVER_PROFESSIONAL} = "enabled" ]
  then
    PRO_PY=${SEAFILE_SERVER_INSTALL_PATH}/pro/pro.py
    ${PRO_PY} setup --mysql --mysql_host=127.0.0.1 --mysql_port=3306 --mysql_user=seafile --mysql_password=${SEAFILE_DB_PW} --mysql_db=seahub-db
fi

# Configuring ccnet.conf
cat >> ${DEFAULT_CONF_DIR}/ccnet.conf <<EOF

[Database]
ENGINE = mysql
HOST = 127.0.0.1
PORT = 3306
USER = seafile
PASSWD = ${SEAFILE_DB_PW}
DB = ccnet-db
CONNECTION_CHARSET = utf8
EOF

# Configuring seafile.conf
cat >> ${DEFAULT_CONF_DIR}/seafile.conf <<EOF

[database]
type = mysql
host = 127.0.0.1
port = 3306
user = seafile
password = ${SEAFILE_DB_PW}
db_name = seafile-db
connection_charset = utf8
EOF

# Configuring seahub_settings.py
cat >> ${DEST_SETTINGS_PY} <<EOF

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'seahub-db',
        'USER': 'seafile',
        'PASSWORD': '${SEAFILE_DB_PW}',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': 'SET storage_engine=INNODB',
        }
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
    'LOCATION': '127.0.0.1:11211',
    }
}

EMAIL_USE_TLS                       = False
EMAIL_HOST                          = 'localhost'
EMAIL_HOST_USER                     = ''
EMAIL_HOST_PASSWORD                 = ''
EMAIL_PORT                          = '25'
DEFAULT_FROM_EMAIL                  = 'noreply@${HOSTNAME}'
SERVER_EMAIL                        = 'EMAIL_HOST_USER'
TIME_ZONE                           = '${SEAFILE_SERVER_TIME_ZONE}'
SITE_BASE                           = 'https://${HOSTNAME}'
SITE_NAME                           = 'Seafile Server'
SITE_TITLE                          = 'Seafile Server'
ENABLE_SIGNUP                       = False
ACTIVATE_AFTER_REGISTRATION         = False
SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER  = True
SEND_EMAIL_ON_RESETTING_USER_PASSWD = True
CLOUD_MODE                          = False
FILE_PREVIEW_MAX_SIZE               = 30 * 1024 * 1024
SESSION_COOKIE_AGE                  = 60 * 60 * 24 * 7 * 2
SESSION_SAVE_EVERY_REQUEST          = False
SESSION_EXPIRE_AT_BROWSER_CLOSE     = False
FILE_SERVER_ROOT                    = 'https://${HOSTNAME}/seafhttp'
REPO_PASSWORD_MIN_LENGTH            = 8
USER_PASSWORD_MIN_LENGTH            = 6
USER_PASSWORD_STRENGTH_LEVEL        = 3
USER_STRONG_PASSWORD_REQUIRED       = True
ENABLE_MAKE_GROUP_PUBLIC            = False
ENABLE_THUMBNAIL                    = True
THUMBNAIL_ROOT                      = '${SEAFILE_SERVER_HOME}/seahub-data/thumbnail/thumb/'
REPO_PASSWORD_MIN_LENGTH            = 8
USER_PASSWORD_MIN_LENGTH            = 8
USER_PASSWORD_STRENGTH_LEVEL        = 3
USER_STRONG_PASSWORD_REQUIRED       = True
EOF

# Backup check_init_admin.py befor applying changes
cp ${SEAFILE_SERVER_INSTALL_PATH}/check_init_admin.py ${SEAFILE_SERVER_INSTALL_PATH}/check_init_admin.py.backup

# Set admin credentials in check_init_admin.py
SEAFILE_SERVER_ADMIN_PW=$(pwgen 14 1)
eval "sed -i 's/= ask_admin_email()/= \"${SEAFILE_SERVER_ADMIN}\"/' ${SEAFILE_SERVER_INSTALL_PATH}/check_init_admin.py"
eval "sed -i 's/= ask_admin_password()/= \"${SEAFILE_SERVER_ADMIN_PW}\"/' ${SEAFILE_SERVER_INSTALL_PATH}/check_init_admin.py"

# Start and stop Seafile eco system. This generates the initial admin user.
${SEAFILE_SERVER_INSTALL_PATH}/seafile.sh start
${SEAFILE_SERVER_INSTALL_PATH}/seahub.sh start-fastcgi 8000
${SEAFILE_SERVER_INSTALL_PATH}/seahub.sh stop
${SEAFILE_SERVER_INSTALL_PATH}/seafile.sh stop


# Restore original check_init_admin.py
mv ${SEAFILE_SERVER_INSTALL_PATH}/check_init_admin.py.backup ${SEAFILE_SERVER_INSTALL_PATH}/check_init_admin.py

# Fix permissions
chown ${SEAFILE_SERVER_USER}:${SEAFILE_SERVER_USER} -R ${SEAFILE_SERVER_HOME}

# Enable office preview in Seahub
if [ ${SEAFILE_SERVER_PROFESSIONAL} = "enabled" ]
  then
    sed -i 's/enabled = false/enabled = true/' ${DEFAULT_CONF_DIR}/seafevents.conf
fi
}


function start-seafile-server {
echo "Fix any ownership issues before starting"
chown -R ${SEAFILE_SERVER_USER}:${SEAFILE_SERVER_USER} ${SEAFILE_SERVER_HOME}

echo "Restart memcached and enable it to be started at boot time"
systemctl restart memcached
systemctl enable memcached

echo "Starting productive Seafile server"
seafile-server-restart
}


function setup-seafile-server-change-address-script {
cat > /usr/local/sbin/seafile-server-change-address <<'ENDOFILE'
#/bin/bash
#set -x

# Save at /usr/local/sbin/seafile-server-change-address and set permissions with
# chmod 500 /usr/local/sbin/seafile-server-change-address

# Vars
HOSTNAME=$(hostname -f)
SEAFILE_SERVER_HOME=/opt/seafile

# Intro
clear
cat <<EOF

  Deutsch
  -------------------------------------------
  Mit diesem Skript können Sie die Adresse Ihres
  Seafile Serves ändern. Das ist zum Beispiel nötig wenn
  sich Ihre Domain- oder IP-Adresse geändert hat.

  Wird Seafile mit der falschen Adresse betrieben,
  funktioniert der Up- und Download von Dateien nicht.

  Soll der Server mittes Portweiterleitung erreichbar
  sein, verwenden Sie bitte die öffentliche oder externe
  IP Ihres Routers bzw. einen öffentlich Domainnamen.

  Bei Falscheingaben rufen Sie das Skript bitte erneut auf.

  Der aktuelle Hostname wird vorausgefüllt. Ggf. einfach
  ändern.


  English
  -------------------------------------------
  With this script you can change the address of your
  Seafile server. For example this is necessary if
  your DNS or IP address has changed.

  If the wrong address is set, up- and downloads will not work.

  If the needs to be accessible from the WAN, but resides behind
  a NAT router use the public IP or better the external DNS address.

  If you made a mistake setting up the address, just run this skript again.

  The current hostname is pre-populated. If necessary, simply change
  it to fit your needs.

EOF

echo "Geben Sie jetzt die neue IP oder Domainadresse"
echo "Enter your new IP or DNS name"
read -e -p "Neue Domainadresse:" -i " ${HOSTNAME}" URL


cat <<EOF

  Die eingebenen Adresse lautet: ${URL}
  Your new address: ${URL}

  -------------------------------------------
  Fortfahren mit ENTER. Abruch mit STRG-C...
  Proceed with ENTER. Abort with CTRL-C...

EOF
read dummy

# Other addresses in seahub_settings.py and ccnet.conf
echo Applying changes
sed -i "s/^SITE_BASE.*/SITE_BASE = \'${URL}\'/g" ${SEAFILE_SERVER_HOME}/conf/seahub_settings.py
sed -i "s/^SITE_NAME.*/SITE_NAME = \'${URL}\'/g" ${SEAFILE_SERVER_HOME}/conf/seahub_settings.py
sed -i "s/^SITE_TITLE.*/SITE_TITLE = \'${URL}\'/g" ${SEAFILE_SERVER_HOME}/conf/seahub_settings.py
sed -i "s/^FILE_SERVER_ROOT.*/FILE_SERVER_ROOT = '\https:\/\/${URL}\/seafhttp\'/g" ${SEAFILE_SERVER_HOME}/conf/seahub_settings.py
sed -i "s/^SERVICE_URL.*/SERVICE_URL = https:\/\/${URL}/g" ${SEAFILE_SERVER_HOME}/conf/ccnet.conf

# Restart Seafile with new URL
echo restarting Seafile server
seafile-server-restart

# Outro
clear
cat <<EOF

  Deutsch
  -------------------------------------------
  Fertig! Der Seafile Server wurde neu gestartet.

  Seahub sollte nun über https://${HOSTNAME} erreichbar sein.


  English
  -------------------------------------------
  Done! Your Seafile Server has been restarted.

  Seahub should be reachable at https://${HOSTNAME}.

EOF
ENDOFILE
chmod 500 /usr/local/sbin/seafile-server-change-address
}


function installation-summary {
cat > ${SEAFILE_SERVER_HOME}/$(basename ${0})_report.log<<EOF

  Your Seafile server
  -----------------------------------------------------------------

  Server Name:         ${SERVER_NAME}
  Server Address:      https://${HOSTNAME}

  Seafile Admin:       ${SEAFILE_SERVER_ADMIN}
  Admin Password:      ${SEAFILE_SERVER_ADMIN_PW}

  Seafile Home Dir:    ${SEAFILE_SERVER_HOME}
  Seafile Data Dir:    ${SEAFILE_SERVER_DATA_DIR}

  Seafile DB Credentials:  Check ${SEAFILE_SERVER_HOME}/.my.cnf
  Root DB Credentials:     Check /root/.my.cnf

  Switch to Seafile system account with: su - ${SEAFILE_SERVER_USER} -s /bin/bash


  Next you should manually complete the following steps
  -----------------------------------------------------------------

  1) If this server is behind a firewall, you need to ensure that
     tcp port 443 for the NGINX reverse proxy is open. Optionally
     you may also open tcp port 80 which redirects all unencrypted
     http traffic to the encrypted https port.

  2) Seahub tries to send emails via the local Postfix mail server.
     Make sure Postfix is setup correctly for your environment.


  Optional steps
  -----------------------------------------------------------------

  1) Run seafile-server-change-address to change your Seafile servers DNS name.

  2) Check seahub_settings.py and customize it to fit your needs. Consult
     http://manual.seafile.com/config/seahub_settings_py.html for possible switches.

  3) Setup NGINX with official SSL certificate and create safe DH primes...

  4) Harden system with port knocking, fail2ban, etc.

  5) Implement a backup routine for your Seafile server.
     (As a first step, databases are backed up in ${SEAFILE_SERVER_BACKUPDIR}.)


  Seafile support options
  -----------------------------------------------------------------

  For free community support visit:   https://forum.seafile-server.org
  For paid commercial support visit:  https://seafile.de


  Debug infos
  -----------------------------------------------------------------
  If the installation fails for any reason, review
  /root/$(basename ${0})_installation.log
  or send us the log by mail to $(basename ${0})@seafile.de


  Contribute
  -----------------------------------------------------------------
  Please contact alexander.jackson@seafile.de
  for bugs or suggestions about this installer. Thank you!


  This report is also saved to ${SEAFILE_SERVER_HOME}/$(basename ${0})_report.log

EOF
chmod 600 ${SEAFILE_SERVER_HOME}/$(basename ${0})_report.log
chown -R ${SEAFILE_SERVER_USER}:${SEAFILE_SERVER_USER} ${SEAFILE_SERVER_HOME}/$(basename ${0})_report.log
}


description
ensure-we-are-running-the-installer-on-a-supported-operating-system
are-we-root-abort-if-not
does-user-exist-and-abort-if-he-does
does-directory-exist-abort-if-it-does
abort-if-seafile-professional-source-is-missing
setup-permissive-selinux
extra-packages-for-enterprise-linux
update-operating-system
install-system-utils
setup-ntpd
setup-firewall
install-postfix
setup-unattended-upgrades
install-seafile-server-requirements
install-setup-nginx
create-self-signed-certificate-for-nginx
restart-nginx
setup-maridb
setup-seafile-server-autostart
add-system-user
create-seafile-server-directory
get-seafile-sources
create-seafile-database
import-seahub-database-structure
setup-seafile-server
setup-database-backup
start-seafile-server
setup-seafile-server-change-address-script
print-system-infos
installation-summary

cat ${SEAFILE_SERVER_HOME}/$(basename ${0})_report.log

exit 0
